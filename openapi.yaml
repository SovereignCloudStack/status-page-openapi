openapi: '3.0.2'
info:
  title: SCS Status Page API
  version: '1.0'
components:
  schemas:
    Id:
      type: string
    IncidentImpactType:
      type: string
    IncidentPhase:
      type: string
    IncidentUpdate:
      type: object
      required: [text, createdAt]
      properties:
        text:
          type: string
        createdAt:
          type: string
          format: date-time
    Labels:
      type: object
      additionalProperties:
        type: string
    Component:
      type: object
      required:
        - id
        - displayName
        - labels
        - affectedBy
      properties:
        id:
          type: string
          readOnly: true
        displayName:
          type: string
        labels:
          $ref: '#/components/schemas/Labels'
        affectedBy:
          type: array
          items:
            $ref: '#/components/schemas/Id'
    Incident:
      type: object
      required:
        - id
        - title
        - description
        - updates
        - affects
        - impactType
        - phase
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
        updates:
          type: array
          items:
            $ref: '#/components/schemas/IncidentUpdate'
        affects:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        beganAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
          nullable: true
        impactType:
          $ref: '#/components/schemas/IncidentImpactType'
        phase:
          $ref: '#/components/schemas/IncidentPhase'
paths:
  /phases:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncidentPhase'
    put:
      summary: Create a new list of phases.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IncidentPhase'
      responses:
        '200':
          description:  OK
          content:
            application/json:
              schema:
                type: boolean
  /impacttypes:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncidentImpactType'
    post:
      summary: Create a new impact type
      operationId: createImpactType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentImpactType'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
  /components:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
    post:
      summary: Create a new component
      operationId: createComponent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
  /components/{componentId}:
    get:
      summary: Get specific component by id
      operationId: getComponent
      parameters:
      - in: path
        name: componentId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
  /incidents:
    get:
      summary: Get list of incidents
      parameters:
      - in: query
        name: start
        schema:
          type: string
          format: date-time
          default: '2022-01-01T10:10:10.010Z'
        required: true
        description: Start of time frame to query for (RFC3339)
      - in: query
        name: end
        schema:
          type: string
          format: date-time
          default: '2024-01-01T10:10:10.010Z'
        required: true
        description: End of time frame to query for (RFC3339)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Incident'
    post:
      summary: Create a new incident
      operationId: createIncident
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incident'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
  /incidents/{incidentId}:
    get:
      summary: Get specific incident by id
      operationId: getIncident
      parameters:
      - in: path
        name: incidentId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'
