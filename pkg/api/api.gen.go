// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Component defines model for Component.
type Component struct {
	// AffectedBy A list of impacts for a component or incident.
	// In case of an incident the IDs refer to a component and vice versa.
	AffectedBy *ImpactList `json:"affectedBy,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Id Identification for objects. UUID preferred.
	Id *Id `json:"id,omitempty"`

	// Labels Labels are free text key value pairs for components.
	Labels *Labels `json:"labels,omitempty"`
}

// ComponentList defines model for ComponentList.
type ComponentList = []Component

// Date Point in time. Nullable for open end timeframes.
type Date = time.Time

// Description A longer text with detailed information.
type Description = string

// DisplayName Short and describing name.
type DisplayName = string

// Id Identification for objects. UUID preferred.
type Id = string

// Impact An impact connects a component and an incident with an impact type.
type Impact struct {
	// Reference Identification for objects. UUID preferred.
	Reference *Id         `json:"reference,omitempty"`
	Type      *ImpactType `json:"type,omitempty"`
}

// ImpactList A list of impacts for a component or incident.
// In case of an incident the IDs refer to a component and vice versa.
type ImpactList = []Impact

// ImpactType defines model for ImpactType.
type ImpactType struct {
	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Id Identification for objects. UUID preferred.
	Id *Id `json:"id,omitempty"`
}

// ImpactTypeList defines model for ImpactTypeList.
type ImpactTypeList = []ImpactType

// Incident defines model for Incident.
type Incident struct {
	// Affects A list of impacts for a component or incident.
	// In case of an incident the IDs refer to a component and vice versa.
	Affects *ImpactList `json:"affects,omitempty"`

	// BeganAt Point in time. Nullable for open end timeframes.
	BeganAt *Date `json:"beganAt"`

	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// EndedAt Point in time. Nullable for open end timeframes.
	EndedAt *Date `json:"endedAt"`

	// Id Identification for objects. UUID preferred.
	Id *Id `json:"id,omitempty"`

	// Phase To reference a phase, its generation and order is needed.
	Phase *PhaseReference `json:"phase,omitempty"`

	// Updates List of Incrementals for referencing subresources.
	Updates *IncrementalList `json:"updates,omitempty"`
}

// IncidentList defines model for IncidentList.
type IncidentList = []Incident

// IncidentUpdate An update is a sub resource to an incident.
// It's identified by the incident ID and its own order.
// Updates happen in a given order.
type IncidentUpdate struct {
	// CreatedAt Point in time. Nullable for open end timeframes.
	CreatedAt *Date `json:"createdAt"`

	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Order Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Order *Incremental `json:"order,omitempty"`
}

// IncidentUpdateList defines model for IncidentUpdateList.
type IncidentUpdateList = []IncidentUpdate

// Incremental Positive and incrementing number for ordering and identfication of e.g. sub resources.
type Incremental = int

// IncrementalList List of Incrementals for referencing subresources.
type IncrementalList = []Incremental

// Labels Labels are free text key value pairs for components.
type Labels map[string]string

// Phase A single phase is just its name.
// It can be referenced by its generation and order.
// See: #/components/schemas/PhaseReference
type Phase = string

// PhaseList Phase resources are always handled as a list.
type PhaseList struct {
	// Generation Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Generation *Incremental `json:"generation,omitempty"`
	Phases     []Phase      `json:"phases"`
}

// PhaseReference To reference a phase, its generation and order is needed.
type PhaseReference struct {
	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Generation Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Generation *Incremental `json:"generation,omitempty"`

	// Order Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Order *Incremental `json:"order,omitempty"`
}

// ResponseData Wraps the retuned data in an object.
// See: https://github.com/SovereignCloudStack/status-page-openapi/issues/6
type ResponseData struct {
	Content *ResponseData_Content `json:"content,omitempty"`
}

// ResponseData_Content defines model for ResponseData.Content.
type ResponseData_Content struct {
	union json.RawMessage
}

// Success An operation was successful.
type Success = bool

// ComponentIdPathParameter Identification for objects. UUID preferred.
type ComponentIdPathParameter = Id

// ImpactTypeIdPathParameter Identification for objects. UUID preferred.
type ImpactTypeIdPathParameter = Id

// IncidentIdPathParameter Identification for objects. UUID preferred.
type IncidentIdPathParameter = Id

// IncidentUpdateIdPathParameter Positive and incrementing number for ordering and identfication of e.g. sub resources.
type IncidentUpdateIdPathParameter = Incremental

// Response Wraps the retuned data in an object.
// See: https://github.com/SovereignCloudStack/status-page-openapi/issues/6
type Response = ResponseData

// ComponentRequest defines model for ComponentRequest.
type ComponentRequest = Component

// ImpactTypeRequest defines model for ImpactTypeRequest.
type ImpactTypeRequest = ImpactType

// IncidentRequest defines model for IncidentRequest.
type IncidentRequest = Incident

// IncidentUpdateRequest An update is a sub resource to an incident.
// It's identified by the incident ID and its own order.
// Updates happen in a given order.
type IncidentUpdateRequest = IncidentUpdate

// GetIncidentsParams defines parameters for GetIncidents.
type GetIncidentsParams struct {
	// Start Start of time frame to query for (RFC3339).
	Start time.Time `form:"start" json:"start"`

	// End End of time frame to query for (RFC3339).
	End time.Time `form:"end" json:"end"`
}

// GetPhaseListParams defines parameters for GetPhaseList.
type GetPhaseListParams struct {
	Generation *Incremental `form:"generation,omitempty" json:"generation,omitempty"`
}

// CreateComponentJSONRequestBody defines body for CreateComponent for application/json ContentType.
type CreateComponentJSONRequestBody = Component

// UpdateComponentJSONRequestBody defines body for UpdateComponent for application/json ContentType.
type UpdateComponentJSONRequestBody = Component

// CreateImpactTypeJSONRequestBody defines body for CreateImpactType for application/json ContentType.
type CreateImpactTypeJSONRequestBody = ImpactType

// UpdateImpactTypeJSONRequestBody defines body for UpdateImpactType for application/json ContentType.
type UpdateImpactTypeJSONRequestBody = ImpactType

// CreateIncidentJSONRequestBody defines body for CreateIncident for application/json ContentType.
type CreateIncidentJSONRequestBody = Incident

// UpdateIncidentJSONRequestBody defines body for UpdateIncident for application/json ContentType.
type UpdateIncidentJSONRequestBody = Incident

// CreateIncidentUpdateJSONRequestBody defines body for CreateIncidentUpdate for application/json ContentType.
type CreateIncidentUpdateJSONRequestBody = IncidentUpdate

// UpdateIncidentUpdateJSONRequestBody defines body for UpdateIncidentUpdate for application/json ContentType.
type UpdateIncidentUpdateJSONRequestBody = IncidentUpdate

// CreatePhaseListJSONRequestBody defines body for CreatePhaseList for application/json ContentType.
type CreatePhaseListJSONRequestBody = PhaseList

// AsSuccess returns the union data inside the ResponseData_Content as a Success
func (t ResponseData_Content) AsSuccess() (Success, error) {
	var body Success
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuccess overwrites any union data inside the ResponseData_Content as the provided Success
func (t *ResponseData_Content) FromSuccess(v Success) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuccess performs a merge with any union data inside the ResponseData_Content, using the provided Success
func (t *ResponseData_Content) MergeSuccess(v Success) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsId returns the union data inside the ResponseData_Content as a Id
func (t ResponseData_Content) AsId() (Id, error) {
	var body Id
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromId overwrites any union data inside the ResponseData_Content as the provided Id
func (t *ResponseData_Content) FromId(v Id) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeId performs a merge with any union data inside the ResponseData_Content, using the provided Id
func (t *ResponseData_Content) MergeId(v Id) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsIncremental returns the union data inside the ResponseData_Content as a Incremental
func (t ResponseData_Content) AsIncremental() (Incremental, error) {
	var body Incremental
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncremental overwrites any union data inside the ResponseData_Content as the provided Incremental
func (t *ResponseData_Content) FromIncremental(v Incremental) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncremental performs a merge with any union data inside the ResponseData_Content, using the provided Incremental
func (t *ResponseData_Content) MergeIncremental(v Incremental) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPhaseList returns the union data inside the ResponseData_Content as a PhaseList
func (t ResponseData_Content) AsPhaseList() (PhaseList, error) {
	var body PhaseList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPhaseList overwrites any union data inside the ResponseData_Content as the provided PhaseList
func (t *ResponseData_Content) FromPhaseList(v PhaseList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePhaseList performs a merge with any union data inside the ResponseData_Content, using the provided PhaseList
func (t *ResponseData_Content) MergePhaseList(v PhaseList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsImpactType returns the union data inside the ResponseData_Content as a ImpactType
func (t ResponseData_Content) AsImpactType() (ImpactType, error) {
	var body ImpactType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImpactType overwrites any union data inside the ResponseData_Content as the provided ImpactType
func (t *ResponseData_Content) FromImpactType(v ImpactType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImpactType performs a merge with any union data inside the ResponseData_Content, using the provided ImpactType
func (t *ResponseData_Content) MergeImpactType(v ImpactType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsImpactTypeList returns the union data inside the ResponseData_Content as a ImpactTypeList
func (t ResponseData_Content) AsImpactTypeList() (ImpactTypeList, error) {
	var body ImpactTypeList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImpactTypeList overwrites any union data inside the ResponseData_Content as the provided ImpactTypeList
func (t *ResponseData_Content) FromImpactTypeList(v ImpactTypeList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImpactTypeList performs a merge with any union data inside the ResponseData_Content, using the provided ImpactTypeList
func (t *ResponseData_Content) MergeImpactTypeList(v ImpactTypeList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsComponent returns the union data inside the ResponseData_Content as a Component
func (t ResponseData_Content) AsComponent() (Component, error) {
	var body Component
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComponent overwrites any union data inside the ResponseData_Content as the provided Component
func (t *ResponseData_Content) FromComponent(v Component) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComponent performs a merge with any union data inside the ResponseData_Content, using the provided Component
func (t *ResponseData_Content) MergeComponent(v Component) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsComponentList returns the union data inside the ResponseData_Content as a ComponentList
func (t ResponseData_Content) AsComponentList() (ComponentList, error) {
	var body ComponentList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComponentList overwrites any union data inside the ResponseData_Content as the provided ComponentList
func (t *ResponseData_Content) FromComponentList(v ComponentList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComponentList performs a merge with any union data inside the ResponseData_Content, using the provided ComponentList
func (t *ResponseData_Content) MergeComponentList(v ComponentList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsIncident returns the union data inside the ResponseData_Content as a Incident
func (t ResponseData_Content) AsIncident() (Incident, error) {
	var body Incident
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncident overwrites any union data inside the ResponseData_Content as the provided Incident
func (t *ResponseData_Content) FromIncident(v Incident) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncident performs a merge with any union data inside the ResponseData_Content, using the provided Incident
func (t *ResponseData_Content) MergeIncident(v Incident) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsIncidentList returns the union data inside the ResponseData_Content as a IncidentList
func (t ResponseData_Content) AsIncidentList() (IncidentList, error) {
	var body IncidentList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentList overwrites any union data inside the ResponseData_Content as the provided IncidentList
func (t *ResponseData_Content) FromIncidentList(v IncidentList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentList performs a merge with any union data inside the ResponseData_Content, using the provided IncidentList
func (t *ResponseData_Content) MergeIncidentList(v IncidentList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsIncidentUpdate returns the union data inside the ResponseData_Content as a IncidentUpdate
func (t ResponseData_Content) AsIncidentUpdate() (IncidentUpdate, error) {
	var body IncidentUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentUpdate overwrites any union data inside the ResponseData_Content as the provided IncidentUpdate
func (t *ResponseData_Content) FromIncidentUpdate(v IncidentUpdate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentUpdate performs a merge with any union data inside the ResponseData_Content, using the provided IncidentUpdate
func (t *ResponseData_Content) MergeIncidentUpdate(v IncidentUpdate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsIncidentUpdateList returns the union data inside the ResponseData_Content as a IncidentUpdateList
func (t ResponseData_Content) AsIncidentUpdateList() (IncidentUpdateList, error) {
	var body IncidentUpdateList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIncidentUpdateList overwrites any union data inside the ResponseData_Content as the provided IncidentUpdateList
func (t *ResponseData_Content) FromIncidentUpdateList(v IncidentUpdateList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIncidentUpdateList performs a merge with any union data inside the ResponseData_Content, using the provided IncidentUpdateList
func (t *ResponseData_Content) MergeIncidentUpdateList(v IncidentUpdateList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ResponseData_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseData_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of components.
	// (GET /components)
	GetComponents(ctx echo.Context) error
	// Create a new component.
	// (POST /components)
	CreateComponent(ctx echo.Context) error
	// Delete a component.
	// (DELETE /components/{componentId})
	DeleteComponent(ctx echo.Context, componentId ComponentIdPathParameter) error
	// Get a specific component by id.
	// (GET /components/{componentId})
	GetComponent(ctx echo.Context, componentId ComponentIdPathParameter) error
	// Update a component.
	// (PATCH /components/{componentId})
	UpdateComponent(ctx echo.Context, componentId ComponentIdPathParameter) error
	// Get a list of impact types.
	// (GET /impacttypes)
	GetImpactTypes(ctx echo.Context) error
	// Create a new impact type.
	// (POST /impacttypes)
	CreateImpactType(ctx echo.Context) error
	// Delete an impact type.
	// (DELETE /impacttypes/{impactTypeId})
	DeleteImpactType(ctx echo.Context, impactTypeId ImpactTypeIdPathParameter) error
	// Get a specific impact type by id.
	// (GET /impacttypes/{impactTypeId})
	GetImpactType(ctx echo.Context, impactTypeId ImpactTypeIdPathParameter) error
	// Update a specific impact type.
	// (PATCH /impacttypes/{impactTypeId})
	UpdateImpactType(ctx echo.Context, impactTypeId ImpactTypeIdPathParameter) error
	// Get a list of incidents between two points in time.
	// (GET /incidents)
	GetIncidents(ctx echo.Context, params GetIncidentsParams) error
	// Create a new incident.
	// (POST /incidents)
	CreateIncident(ctx echo.Context) error
	// Delete an incident.
	// (DELETE /incidents/{incidentId})
	DeleteIncident(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Get a specific incident by id.
	// (GET /incidents/{incidentId})
	GetIncident(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Update an incident.
	// (PATCH /incidents/{incidentId})
	UpdateIncident(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Get a list of updates from a specific incident.
	// (GET /incidents/{incidentId}/updates)
	GetIncidentUpdates(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Create a new update to a specific incident.
	// (POST /incidents/{incidentId}/updates)
	CreateIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Delete a specific update from a specific incident
	// (DELETE /incidents/{incidentId}/updates/{updateId})
	DeleteIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter, updateId IncidentUpdateIdPathParameter) error
	// Get a specific update from a specific incident.
	// (GET /incidents/{incidentId}/updates/{updateId})
	GetIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter, updateId IncidentUpdateIdPathParameter) error
	// Update a specific update from a specific incident.
	// (PATCH /incidents/{incidentId}/updates/{updateId})
	UpdateIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter, updateId IncidentUpdateIdPathParameter) error
	// Get the current generation list of phases.
	// (GET /phases)
	GetPhaseList(ctx echo.Context, params GetPhaseListParams) error
	// Create a new generation of the phase list.
	// (POST /phases)
	CreatePhaseList(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetComponents converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComponents(ctx)
	return err
}

// CreateComponent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComponent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateComponent(ctx)
	return err
}

// DeleteComponent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId ComponentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "componentId", runtime.ParamLocationPath, ctx.Param("componentId"), &componentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteComponent(ctx, componentId)
	return err
}

// GetComponent converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId ComponentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "componentId", runtime.ParamLocationPath, ctx.Param("componentId"), &componentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComponent(ctx, componentId)
	return err
}

// UpdateComponent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId ComponentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "componentId", runtime.ParamLocationPath, ctx.Param("componentId"), &componentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateComponent(ctx, componentId)
	return err
}

// GetImpactTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetImpactTypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetImpactTypes(ctx)
	return err
}

// CreateImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateImpactType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateImpactType(ctx)
	return err
}

// DeleteImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteImpactType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "impactTypeId" -------------
	var impactTypeId ImpactTypeIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "impactTypeId", runtime.ParamLocationPath, ctx.Param("impactTypeId"), &impactTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impactTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteImpactType(ctx, impactTypeId)
	return err
}

// GetImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) GetImpactType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "impactTypeId" -------------
	var impactTypeId ImpactTypeIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "impactTypeId", runtime.ParamLocationPath, ctx.Param("impactTypeId"), &impactTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impactTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetImpactType(ctx, impactTypeId)
	return err
}

// UpdateImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateImpactType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "impactTypeId" -------------
	var impactTypeId ImpactTypeIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "impactTypeId", runtime.ParamLocationPath, ctx.Param("impactTypeId"), &impactTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impactTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateImpactType(ctx, impactTypeId)
	return err
}

// GetIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncidentsParams
	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncident(ctx, incidentId)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, incidentId)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncident(ctx, incidentId)
	return err
}

// GetIncidentUpdates converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentUpdates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentUpdates(ctx, incidentId)
	return err
}

// CreateIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncidentUpdate(ctx, incidentId)
	return err
}

// DeleteIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// ------------- Path parameter "updateId" -------------
	var updateId IncidentUpdateIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "updateId", runtime.ParamLocationPath, ctx.Param("updateId"), &updateId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncidentUpdate(ctx, incidentId, updateId)
	return err
}

// GetIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// ------------- Path parameter "updateId" -------------
	var updateId IncidentUpdateIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "updateId", runtime.ParamLocationPath, ctx.Param("updateId"), &updateId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidentUpdate(ctx, incidentId, updateId)
	return err
}

// UpdateIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// ------------- Path parameter "updateId" -------------
	var updateId IncidentUpdateIdPathParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "updateId", runtime.ParamLocationPath, ctx.Param("updateId"), &updateId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncidentUpdate(ctx, incidentId, updateId)
	return err
}

// GetPhaseList converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhaseList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhaseListParams
	// ------------- Optional query parameter "generation" -------------

	err = runtime.BindQueryParameter("form", true, false, "generation", ctx.QueryParams(), &params.Generation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter generation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPhaseList(ctx, params)
	return err
}

// CreatePhaseList converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePhaseList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePhaseList(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/components", wrapper.GetComponents)
	router.POST(baseURL+"/components", wrapper.CreateComponent)
	router.DELETE(baseURL+"/components/:componentId", wrapper.DeleteComponent)
	router.GET(baseURL+"/components/:componentId", wrapper.GetComponent)
	router.PATCH(baseURL+"/components/:componentId", wrapper.UpdateComponent)
	router.GET(baseURL+"/impacttypes", wrapper.GetImpactTypes)
	router.POST(baseURL+"/impacttypes", wrapper.CreateImpactType)
	router.DELETE(baseURL+"/impacttypes/:impactTypeId", wrapper.DeleteImpactType)
	router.GET(baseURL+"/impacttypes/:impactTypeId", wrapper.GetImpactType)
	router.PATCH(baseURL+"/impacttypes/:impactTypeId", wrapper.UpdateImpactType)
	router.GET(baseURL+"/incidents", wrapper.GetIncidents)
	router.POST(baseURL+"/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/incidents/:incidentId", wrapper.DeleteIncident)
	router.GET(baseURL+"/incidents/:incidentId", wrapper.GetIncident)
	router.PATCH(baseURL+"/incidents/:incidentId", wrapper.UpdateIncident)
	router.GET(baseURL+"/incidents/:incidentId/updates", wrapper.GetIncidentUpdates)
	router.POST(baseURL+"/incidents/:incidentId/updates", wrapper.CreateIncidentUpdate)
	router.DELETE(baseURL+"/incidents/:incidentId/updates/:updateId", wrapper.DeleteIncidentUpdate)
	router.GET(baseURL+"/incidents/:incidentId/updates/:updateId", wrapper.GetIncidentUpdate)
	router.PATCH(baseURL+"/incidents/:incidentId/updates/:updateId", wrapper.UpdateIncidentUpdate)
	router.GET(baseURL+"/phases", wrapper.GetPhaseList)
	router.POST(baseURL+"/phases", wrapper.CreatePhaseList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
