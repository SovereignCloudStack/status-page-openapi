// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Component defines model for Component.
type Component struct {
	AffectedBy  []Id   `json:"affectedBy"`
	DisplayName string `json:"displayName"`
	Id          string `json:"id"`
	Labels      Labels `json:"labels"`
}

// Id defines model for Id.
type Id = string

// Incident defines model for Incident.
type Incident struct {
	Affects     []Id               `json:"affects"`
	BeganAt     *time.Time         `json:"beganAt,omitempty"`
	Description string             `json:"description"`
	EndedAt     *time.Time         `json:"endedAt"`
	Id          string             `json:"id"`
	ImpactType  IncidentImpactType `json:"impactType"`
	Phase       IncidentPhase      `json:"phase"`
	Title       string             `json:"title"`
	Updates     []IncidentUpdate   `json:"updates"`
}

// IncidentImpactType defines model for IncidentImpactType.
type IncidentImpactType = string

// IncidentPhase defines model for IncidentPhase.
type IncidentPhase = string

// IncidentUpdate defines model for IncidentUpdate.
type IncidentUpdate struct {
	CreatedAt time.Time `json:"createdAt"`
	Text      string    `json:"text"`
}

// Labels defines model for Labels.
type Labels map[string]string

// GetIncidentsParams defines parameters for GetIncidents.
type GetIncidentsParams struct {
	// Start Start of time frame to query for (RFC3339)
	Start time.Time `form:"start" json:"start"`

	// End End of time frame to query for (RFC3339)
	End time.Time `form:"end" json:"end"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get specific component by id
	// (GET /component/{componentId})
	GetComponent(ctx echo.Context, componentId string) error

	// (GET /components)
	GetComponents(ctx echo.Context) error

	// (GET /impacttypes)
	GetImpacttypes(ctx echo.Context) error
	// Get specific incident by id
	// (GET /incident/{incidentId})
	GetIncident(ctx echo.Context, incidentId string) error
	// Get list of incidents
	// (GET /incidents)
	GetIncidents(ctx echo.Context, params GetIncidentsParams) error

	// (GET /phases)
	GetPhases(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetComponent converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "componentId", runtime.ParamLocationPath, ctx.Param("componentId"), &componentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComponent(ctx, componentId)
	return err
}

// GetComponents converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComponents(ctx)
	return err
}

// GetImpacttypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetImpacttypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetImpacttypes(ctx)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentId", runtime.ParamLocationPath, ctx.Param("incidentId"), &incidentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncident(ctx, incidentId)
	return err
}

// GetIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncidentsParams
	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidents(ctx, params)
	return err
}

// GetPhases converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhases(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPhases(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/component/:componentId", wrapper.GetComponent)
	router.GET(baseURL+"/components", wrapper.GetComponents)
	router.GET(baseURL+"/impacttypes", wrapper.GetImpacttypes)
	router.GET(baseURL+"/incident/:incidentId", wrapper.GetIncident)
	router.GET(baseURL+"/incidents", wrapper.GetIncidents)
	router.GET(baseURL+"/phases", wrapper.GetPhases)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/bMAz9Kwa3wwa4iZPsMt+6YiuCFVuwdJcVPSgWnaqwZVWShwWB//tAOfFH7Tku",
	"AhQDcrAt6pHv6ZHKHqIsVZlEaQ2EezDRA6bMPV4dF+hF6UyhtgLdEotjjCzyTzt6ExZT9/mtxhhCeDOt",
	"MacHwOmSQ+GD3SmEEJjWbEfvXBiVsN03liIBHJaN1UJuaV3w3s8J22ByMuVNGVUUPmh8yoVGDuEdYbYT",
	"V3h+k9h9VW22ecTIUt5lfzlLGQk+IJQ5U6UNbpm8dPBxplNmIQTOLF5Y4crvFMTRRFooKzLZWzBKjnwA",
	"UOZJwjYJQmh1jv7ocxGpYpG9dZ9PED1Itqx3FD6oB2ZGb125YJJL2KTfPrkiVi+Q/wD90+3rHkWfk8rs",
	"bc3rzH5lgZY6R6q9JutKM2S61VGzf0Yc2HTMGWlkdtAHHUiLf2xPrme6uCi/gd9H86bqYca5INlYsmrV",
	"183exqC0QsaZiy09AOurtbe2zObGW7EteperJfjwG7VxvQCzSUBImULJlIAQFpNgMqfzYPbBZa19Md1X",
	"j0te0NoWHXsqklHFNA/gGm09KglIsxQtagPh3R4EZSVwais35qCBCk3hyl4rvdgn8j0FG5VJU+ozDwJ3",
	"jJm0h+HDlEpE5EqbPpqy+Wu8IefXDJysrQEC37+6IzZ5mjK9g5B08IzCSMQi8io0b7PzBHeh0/atclI3",
	"A2dyG9XeDZKdzu4n7biUfUvxg2SWjbDXYNM/Ql9A67B/uj8+nXB5dc2NMXmN+d94vKp/jMWvmxY/kmk6",
	"/PjNjJHMdDVr519bpq2XxR5NXi+mSM9m3lOOeufFmfbe/fhytVgsPr6ni4R2uKVab0MAg1JzjFme0Iif",
	"B/P5RTC7CGa3syB0v0kwC36BP+oaKPzn1X+W/JzaUfLxlX84p/L712zM0e343HeJMM4LtcWc49xfhkG7",
	"rcqI1yRZ/wsbN3iK4m8AAAD//yLBNF5zDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
