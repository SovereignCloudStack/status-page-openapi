// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Component defines model for Component.
type Component struct {
	// ActivelyAffectedBy A list of impacts for a component.
	// Impacts reference incidents.
	ActivelyAffectedBy *ImpactIncidentList `json:"activelyAffectedBy,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Labels Labels are free text key value pairs for components.
	Labels *Labels `json:"labels,omitempty"`
}

// ComponentResponseData defines model for ComponentResponseData.
type ComponentResponseData struct {
	// ActivelyAffectedBy A list of impacts for a component.
	// Impacts reference incidents.
	ActivelyAffectedBy *ImpactIncidentList `json:"activelyAffectedBy,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Id Identification for objects. UUID preferred.
	Id Id `json:"id"`

	// Labels Labels are free text key value pairs for components.
	Labels *Labels `json:"labels,omitempty"`
}

// Date Point in time. Nullable for open end timeframes.
type Date = time.Time

// Description A longer text with detailed information.
type Description = string

// DisplayName Short and describing name.
type DisplayName = string

// Generation Incremental as generation field for responses.
type Generation struct {
	// Generation Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Generation Incremental `json:"generation"`
}

// Id Identification for objects. UUID preferred.
type Id = openapi_types.UUID

// IdField Id field for responses.
type IdField struct {
	// Id Identification for objects. UUID preferred.
	Id Id `json:"id"`
}

// Impact An impact connects a component and an incident with an impact type.
type Impact struct {
	// Reference Identification for objects. UUID preferred.
	Reference *Id `json:"reference,omitempty"`

	// Severity The severity of an impact affecting a component. Different impact types
	// might have different severities impacting different components.
	Severity *SeverityValue `json:"severity,omitempty"`

	// Type Identification for objects. UUID preferred.
	Type *Id `json:"type,omitempty"`
}

// ImpactComponentList A list of impacts for an incident.
// Impacts reference components.
type ImpactComponentList = []Impact

// ImpactIncidentList A list of impacts for a component.
// Impacts reference incidents.
type ImpactIncidentList = []Impact

// ImpactType defines model for ImpactType.
type ImpactType struct {
	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`
}

// ImpactTypeResponseData defines model for ImpactTypeResponseData.
type ImpactTypeResponseData struct {
	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Id Identification for objects. UUID preferred.
	Id Id `json:"id"`
}

// Incident defines model for Incident.
type Incident struct {
	// Affects A list of impacts for an incident.
	// Impacts reference components.
	Affects *ImpactComponentList `json:"affects,omitempty"`

	// BeganAt Point in time. Nullable for open end timeframes.
	BeganAt *Date `json:"beganAt"`

	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// EndedAt Point in time. Nullable for open end timeframes.
	EndedAt *Date `json:"endedAt"`

	// Phase To reference a phase, its generation and order is needed.
	Phase *PhaseReference `json:"phase,omitempty"`

	// Updates List of Incrementals for referencing subresources.
	Updates *IncrementalList `json:"updates,omitempty"`
}

// IncidentResponseData defines model for IncidentResponseData.
type IncidentResponseData struct {
	// Affects A list of impacts for an incident.
	// Impacts reference components.
	Affects *ImpactComponentList `json:"affects,omitempty"`

	// BeganAt Point in time. Nullable for open end timeframes.
	BeganAt *Date `json:"beganAt"`

	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// EndedAt Point in time. Nullable for open end timeframes.
	EndedAt *Date `json:"endedAt"`

	// Id Identification for objects. UUID preferred.
	Id Id `json:"id"`

	// Phase To reference a phase, its generation and order is needed.
	Phase *PhaseReference `json:"phase,omitempty"`

	// Updates List of Incrementals for referencing subresources.
	Updates *IncrementalList `json:"updates,omitempty"`
}

// IncidentUpdate An update is a sub resource to an incident.
// It's identified by the incident ID and its own order.
// Updates happen in a given order.
type IncidentUpdate struct {
	// CreatedAt Point in time. Nullable for open end timeframes.
	CreatedAt *Date `json:"createdAt"`

	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`
}

// IncidentUpdateResponseData defines model for IncidentUpdateResponseData.
type IncidentUpdateResponseData struct {
	// CreatedAt Point in time. Nullable for open end timeframes.
	CreatedAt *Date `json:"createdAt"`

	// Description A longer text with detailed information.
	Description *Description `json:"description,omitempty"`

	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Order Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Order Incremental `json:"order"`
}

// Incremental Positive and incrementing number for ordering and identfication of e.g. sub resources.
type Incremental = int

// IncrementalList List of Incrementals for referencing subresources.
type IncrementalList = []Incremental

// Labels Labels are free text key value pairs for components.
type Labels map[string]string

// Order Incremental as order field for responses.
type Order struct {
	// Order Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Order Incremental `json:"order"`
}

// Phase A single phase is just its name.
// It can be referenced by its generation and order.
// See: #/components/schemas/PhaseReference
type Phase = string

// PhaseList Phase resources are always handled as a list.
type PhaseList struct {
	Phases []Phase `json:"phases"`
}

// PhaseListResponseData defines model for PhaseListResponseData.
type PhaseListResponseData struct {
	// Generation Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Generation Incremental `json:"generation"`
	Phases     []Phase     `json:"phases"`
}

// PhaseReference defines model for PhaseReference.
type PhaseReference struct {
	// Generation Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Generation Incremental `json:"generation"`

	// Order Positive and incrementing number for ordering and identfication of e.g. sub resources.
	Order Incremental `json:"order"`
}

// Severity A severity has an identifying name and a numeric value.
type Severity struct {
	// DisplayName Short and describing name.
	DisplayName *DisplayName `json:"displayName,omitempty"`

	// Value The severity of an impact affecting a component. Different impact types
	// might have different severities impacting different components.
	Value *SeverityValue `json:"value,omitempty"`
}

// SeverityValue The severity of an impact affecting a component. Different impact types
// might have different severities impacting different components.
type SeverityValue = int

// ComponentIdPathParameter Identification for objects. UUID preferred.
type ComponentIdPathParameter = Id

// GenerationQueryParameter Positive and incrementing number for ordering and identfication of e.g. sub resources.
type GenerationQueryParameter = Incremental

// ImpactTypeIdPathParameter Identification for objects. UUID preferred.
type ImpactTypeIdPathParameter = Id

// IncidentIdPathParameter Identification for objects. UUID preferred.
type IncidentIdPathParameter = Id

// IncidentUpdateOrderPathParameter Positive and incrementing number for ordering and identfication of e.g. sub resources.
type IncidentUpdateOrderPathParameter = Incremental

// SeverityNamePathParameter Short and describing name.
type SeverityNamePathParameter = DisplayName

// ComponentListResponse defines model for ComponentListResponse.
type ComponentListResponse struct {
	Data []ComponentResponseData `json:"data"`
}

// ComponentResponse defines model for ComponentResponse.
type ComponentResponse struct {
	Data ComponentResponseData `json:"data"`
}

// GenerationResponse Incremental as generation field for responses.
type GenerationResponse = Generation

// IdResponse Id field for responses.
type IdResponse = IdField

// ImpactTypeListResponse defines model for ImpactTypeListResponse.
type ImpactTypeListResponse struct {
	Data []ImpactTypeResponseData `json:"data"`
}

// ImpactTypeResponse defines model for ImpactTypeResponse.
type ImpactTypeResponse struct {
	Data ImpactTypeResponseData `json:"data"`
}

// IncidentListResponse defines model for IncidentListResponse.
type IncidentListResponse struct {
	Data []IncidentResponseData `json:"data"`
}

// IncidentResponse defines model for IncidentResponse.
type IncidentResponse struct {
	Data IncidentResponseData `json:"data"`
}

// IncidentUpdateListResponse defines model for IncidentUpdateListResponse.
type IncidentUpdateListResponse struct {
	Data []IncidentUpdateResponseData `json:"data"`
}

// IncidentUpdateResponse defines model for IncidentUpdateResponse.
type IncidentUpdateResponse struct {
	Data IncidentUpdateResponseData `json:"data"`
}

// OrderResponse Incremental as order field for responses.
type OrderResponse = Order

// PhaseListResponse defines model for PhaseListResponse.
type PhaseListResponse struct {
	Data PhaseListResponseData `json:"data"`
}

// SeverityListResponse defines model for SeverityListResponse.
type SeverityListResponse struct {
	Data []Severity `json:"data"`
}

// SeverityResponse defines model for SeverityResponse.
type SeverityResponse struct {
	// Data A severity has an identifying name and a numeric value.
	Data Severity `json:"data"`
}

// ComponentRequest defines model for ComponentRequest.
type ComponentRequest = Component

// ImpactTypeRequest defines model for ImpactTypeRequest.
type ImpactTypeRequest = ImpactType

// IncidentRequest defines model for IncidentRequest.
type IncidentRequest = Incident

// IncidentUpdateRequest An update is a sub resource to an incident.
// It's identified by the incident ID and its own order.
// Updates happen in a given order.
type IncidentUpdateRequest = IncidentUpdate

// PhaseListRequest Phase resources are always handled as a list.
type PhaseListRequest = PhaseList

// SeverityRequest A severity has an identifying name and a numeric value.
type SeverityRequest = Severity

// GetIncidentsParams defines parameters for GetIncidents.
type GetIncidentsParams struct {
	// Start Start of time frame to query for (RFC3339).
	Start time.Time `form:"start" json:"start"`

	// End End of time frame to query for (RFC3339).
	End time.Time `form:"end" json:"end"`
}

// GetPhaseListParams defines parameters for GetPhaseList.
type GetPhaseListParams struct {
	// Generation Optional generation in query. E.g. ?generation=7
	Generation *GenerationQueryParameter `form:"generation,omitempty" json:"generation,omitempty"`
}

// CreateComponentJSONRequestBody defines body for CreateComponent for application/json ContentType.
type CreateComponentJSONRequestBody = Component

// UpdateComponentJSONRequestBody defines body for UpdateComponent for application/json ContentType.
type UpdateComponentJSONRequestBody = Component

// CreateImpactTypeJSONRequestBody defines body for CreateImpactType for application/json ContentType.
type CreateImpactTypeJSONRequestBody = ImpactType

// UpdateImpactTypeJSONRequestBody defines body for UpdateImpactType for application/json ContentType.
type UpdateImpactTypeJSONRequestBody = ImpactType

// CreateIncidentJSONRequestBody defines body for CreateIncident for application/json ContentType.
type CreateIncidentJSONRequestBody = Incident

// UpdateIncidentJSONRequestBody defines body for UpdateIncident for application/json ContentType.
type UpdateIncidentJSONRequestBody = Incident

// CreateIncidentUpdateJSONRequestBody defines body for CreateIncidentUpdate for application/json ContentType.
type CreateIncidentUpdateJSONRequestBody = IncidentUpdate

// UpdateIncidentUpdateJSONRequestBody defines body for UpdateIncidentUpdate for application/json ContentType.
type UpdateIncidentUpdateJSONRequestBody = IncidentUpdate

// CreatePhaseListJSONRequestBody defines body for CreatePhaseList for application/json ContentType.
type CreatePhaseListJSONRequestBody = PhaseList

// CreateSeverityJSONRequestBody defines body for CreateSeverity for application/json ContentType.
type CreateSeverityJSONRequestBody = Severity

// UpdateSeverityJSONRequestBody defines body for UpdateSeverity for application/json ContentType.
type UpdateSeverityJSONRequestBody = Severity

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of components.
	// (GET /components)
	GetComponents(ctx echo.Context) error
	// Create a new component.
	// (POST /components)
	CreateComponent(ctx echo.Context) error
	// Delete a component.
	// (DELETE /components/{componentId})
	DeleteComponent(ctx echo.Context, componentId ComponentIdPathParameter) error
	// Get a specific component by id.
	// (GET /components/{componentId})
	GetComponent(ctx echo.Context, componentId ComponentIdPathParameter) error
	// Update a component.
	// (PATCH /components/{componentId})
	UpdateComponent(ctx echo.Context, componentId ComponentIdPathParameter) error
	// Get a list of impact types.
	// (GET /impacttypes)
	GetImpactTypes(ctx echo.Context) error
	// Create a new impact type.
	// (POST /impacttypes)
	CreateImpactType(ctx echo.Context) error
	// Delete an impact type.
	// (DELETE /impacttypes/{impactTypeId})
	DeleteImpactType(ctx echo.Context, impactTypeId ImpactTypeIdPathParameter) error
	// Get a specific impact type by id.
	// (GET /impacttypes/{impactTypeId})
	GetImpactType(ctx echo.Context, impactTypeId ImpactTypeIdPathParameter) error
	// Update a specific impact type.
	// (PATCH /impacttypes/{impactTypeId})
	UpdateImpactType(ctx echo.Context, impactTypeId ImpactTypeIdPathParameter) error
	// Get a list of incidents between two points in time.
	// (GET /incidents)
	GetIncidents(ctx echo.Context, params GetIncidentsParams) error
	// Create a new incident.
	// (POST /incidents)
	CreateIncident(ctx echo.Context) error
	// Delete an incident.
	// (DELETE /incidents/{incidentId})
	DeleteIncident(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Get a specific incident by id.
	// (GET /incidents/{incidentId})
	GetIncident(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Update an incident.
	// (PATCH /incidents/{incidentId})
	UpdateIncident(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Get a list of updates from a specific incident.
	// (GET /incidents/{incidentId}/updates)
	GetIncidentUpdates(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Create a new update to a specific incident.
	// (POST /incidents/{incidentId}/updates)
	CreateIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter) error
	// Delete a specific update from a specific incident
	// (DELETE /incidents/{incidentId}/updates/{updateOrder})
	DeleteIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter, updateOrder IncidentUpdateOrderPathParameter) error
	// Get a specific update from a specific incident.
	// (GET /incidents/{incidentId}/updates/{updateOrder})
	GetIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter, updateOrder IncidentUpdateOrderPathParameter) error
	// Update a specific update from a specific incident.
	// (PATCH /incidents/{incidentId}/updates/{updateOrder})
	UpdateIncidentUpdate(ctx echo.Context, incidentId IncidentIdPathParameter, updateOrder IncidentUpdateOrderPathParameter) error
	// Get the current generation list of phases.
	// (GET /phases)
	GetPhaseList(ctx echo.Context, params GetPhaseListParams) error
	// Create a new generation of the phase list.
	// (POST /phases)
	CreatePhaseList(ctx echo.Context) error
	// Get the current list of severieties.
	// (GET /severities)
	GetSeverities(ctx echo.Context) error
	// Create a new severity.
	// (POST /severities)
	CreateSeverity(ctx echo.Context) error
	// Delete a specific severity.
	// (DELETE /severities/{severityName})
	DeleteSeverity(ctx echo.Context, severityName SeverityNamePathParameter) error
	// Get a specific severity by its name.
	// (GET /severities/{severityName})
	GetSeverity(ctx echo.Context, severityName SeverityNamePathParameter) error
	// Update a specific severity.
	// (PATCH /severities/{severityName})
	UpdateSeverity(ctx echo.Context, severityName SeverityNamePathParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetComponents converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComponents(ctx)
	return err
}

// CreateComponent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComponent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateComponent(ctx)
	return err
}

// DeleteComponent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId ComponentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", ctx.Param("componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComponent(ctx, componentId)
	return err
}

// GetComponent converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId ComponentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", ctx.Param("componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComponent(ctx, componentId)
	return err
}

// UpdateComponent converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateComponent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "componentId" -------------
	var componentId ComponentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", ctx.Param("componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter componentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateComponent(ctx, componentId)
	return err
}

// GetImpactTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetImpactTypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImpactTypes(ctx)
	return err
}

// CreateImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateImpactType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateImpactType(ctx)
	return err
}

// DeleteImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteImpactType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "impactTypeId" -------------
	var impactTypeId ImpactTypeIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "impactTypeId", ctx.Param("impactTypeId"), &impactTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impactTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteImpactType(ctx, impactTypeId)
	return err
}

// GetImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) GetImpactType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "impactTypeId" -------------
	var impactTypeId ImpactTypeIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "impactTypeId", ctx.Param("impactTypeId"), &impactTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impactTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetImpactType(ctx, impactTypeId)
	return err
}

// UpdateImpactType converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateImpactType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "impactTypeId" -------------
	var impactTypeId ImpactTypeIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "impactTypeId", ctx.Param("impactTypeId"), &impactTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impactTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateImpactType(ctx, impactTypeId)
	return err
}

// GetIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncidentsParams
	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncidents(ctx, params)
	return err
}

// CreateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncident(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIncident(ctx)
	return err
}

// DeleteIncident converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteIncident(ctx, incidentId)
	return err
}

// GetIncident converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncident(ctx, incidentId)
	return err
}

// UpdateIncident converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncident(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateIncident(ctx, incidentId)
	return err
}

// GetIncidentUpdates converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentUpdates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncidentUpdates(ctx, incidentId)
	return err
}

// CreateIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIncidentUpdate(ctx, incidentId)
	return err
}

// DeleteIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// ------------- Path parameter "updateOrder" -------------
	var updateOrder IncidentUpdateOrderPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "updateOrder", ctx.Param("updateOrder"), &updateOrder, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateOrder: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteIncidentUpdate(ctx, incidentId, updateOrder)
	return err
}

// GetIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// ------------- Path parameter "updateOrder" -------------
	var updateOrder IncidentUpdateOrderPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "updateOrder", ctx.Param("updateOrder"), &updateOrder, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateOrder: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncidentUpdate(ctx, incidentId, updateOrder)
	return err
}

// UpdateIncidentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncidentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentId" -------------
	var incidentId IncidentIdPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "incidentId", ctx.Param("incidentId"), &incidentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentId: %s", err))
	}

	// ------------- Path parameter "updateOrder" -------------
	var updateOrder IncidentUpdateOrderPathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "updateOrder", ctx.Param("updateOrder"), &updateOrder, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updateOrder: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateIncidentUpdate(ctx, incidentId, updateOrder)
	return err
}

// GetPhaseList converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhaseList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhaseListParams
	// ------------- Optional query parameter "generation" -------------

	err = runtime.BindQueryParameter("form", true, false, "generation", ctx.QueryParams(), &params.Generation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter generation: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPhaseList(ctx, params)
	return err
}

// CreatePhaseList converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePhaseList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePhaseList(ctx)
	return err
}

// GetSeverities converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverities(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeverities(ctx)
	return err
}

// CreateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSeverity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSeverity(ctx)
	return err
}

// DeleteSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "severityName" -------------
	var severityName SeverityNamePathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "severityName", ctx.Param("severityName"), &severityName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severityName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSeverity(ctx, severityName)
	return err
}

// GetSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) GetSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "severityName" -------------
	var severityName SeverityNamePathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "severityName", ctx.Param("severityName"), &severityName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severityName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSeverity(ctx, severityName)
	return err
}

// UpdateSeverity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSeverity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "severityName" -------------
	var severityName SeverityNamePathParameter

	err = runtime.BindStyledParameterWithOptions("simple", "severityName", ctx.Param("severityName"), &severityName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severityName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSeverity(ctx, severityName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/components", wrapper.GetComponents)
	router.POST(baseURL+"/components", wrapper.CreateComponent)
	router.DELETE(baseURL+"/components/:componentId", wrapper.DeleteComponent)
	router.GET(baseURL+"/components/:componentId", wrapper.GetComponent)
	router.PATCH(baseURL+"/components/:componentId", wrapper.UpdateComponent)
	router.GET(baseURL+"/impacttypes", wrapper.GetImpactTypes)
	router.POST(baseURL+"/impacttypes", wrapper.CreateImpactType)
	router.DELETE(baseURL+"/impacttypes/:impactTypeId", wrapper.DeleteImpactType)
	router.GET(baseURL+"/impacttypes/:impactTypeId", wrapper.GetImpactType)
	router.PATCH(baseURL+"/impacttypes/:impactTypeId", wrapper.UpdateImpactType)
	router.GET(baseURL+"/incidents", wrapper.GetIncidents)
	router.POST(baseURL+"/incidents", wrapper.CreateIncident)
	router.DELETE(baseURL+"/incidents/:incidentId", wrapper.DeleteIncident)
	router.GET(baseURL+"/incidents/:incidentId", wrapper.GetIncident)
	router.PATCH(baseURL+"/incidents/:incidentId", wrapper.UpdateIncident)
	router.GET(baseURL+"/incidents/:incidentId/updates", wrapper.GetIncidentUpdates)
	router.POST(baseURL+"/incidents/:incidentId/updates", wrapper.CreateIncidentUpdate)
	router.DELETE(baseURL+"/incidents/:incidentId/updates/:updateOrder", wrapper.DeleteIncidentUpdate)
	router.GET(baseURL+"/incidents/:incidentId/updates/:updateOrder", wrapper.GetIncidentUpdate)
	router.PATCH(baseURL+"/incidents/:incidentId/updates/:updateOrder", wrapper.UpdateIncidentUpdate)
	router.GET(baseURL+"/phases", wrapper.GetPhaseList)
	router.POST(baseURL+"/phases", wrapper.CreatePhaseList)
	router.GET(baseURL+"/severities", wrapper.GetSeverities)
	router.POST(baseURL+"/severities", wrapper.CreateSeverity)
	router.DELETE(baseURL+"/severities/:severityName", wrapper.DeleteSeverity)
	router.GET(baseURL+"/severities/:severityName", wrapper.GetSeverity)
	router.PATCH(baseURL+"/severities/:severityName", wrapper.UpdateSeverity)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"J4atP+CBT3en/wcAAP//3FQxAVpGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
